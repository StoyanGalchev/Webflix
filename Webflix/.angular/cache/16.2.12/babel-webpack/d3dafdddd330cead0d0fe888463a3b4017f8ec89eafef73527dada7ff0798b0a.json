{"ast":null,"code":"import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./shared/error-message/error.service\";\nexport class AppInterceptor {\n  constructor(router, errorService) {\n    this.router = router;\n    this.errorService = errorService;\n  }\n  intercept(req, next) {\n    req = req.clone({\n      withCredentials: true\n    });\n    return next.handle(req).pipe(catchError(err => {\n      if (err.status === 404) {\n        this.router.navigate([\"/404\"]);\n      } else {\n        this.errorService.setError(err);\n      }\n      return [err];\n    }));\n  }\n  static #_ = this.ɵfac = function AppInterceptor_Factory(t) {\n    return new (t || AppInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ErrorService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppInterceptor,\n    factory: AppInterceptor.ɵfac\n  });\n}\nexport const appInterceptorProvider = {\n  multi: true,\n  useClass: AppInterceptor,\n  provide: HTTP_INTERCEPTORS\n};","map":{"version":3,"names":["HTTP_INTERCEPTORS","catchError","AppInterceptor","constructor","router","errorService","intercept","req","next","clone","withCredentials","handle","pipe","err","status","navigate","setError","_","i0","ɵɵinject","i1","Router","i2","ErrorService","_2","factory","ɵfac","appInterceptorProvider","multi","useClass","provide"],"sources":["/Users/stoyangalchev/Desktop/Webflix-Angular/Webflix/src/app/app.interseptor.ts"],"sourcesContent":["import {\n  HTTP_INTERCEPTORS,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable, Provider } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, catchError } from 'rxjs';\nimport { ErrorService } from './shared/error-message/error.service';\n\n\n\n@Injectable()\nexport class AppInterceptor implements HttpInterceptor {\n  constructor(private router: Router, private errorService: ErrorService) { }\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n\n    req = req.clone({\n      withCredentials: true,\n    });\n\n\n    return next.handle(req).pipe(\n      catchError((err) => {\n        if(err.status === 404){\n          this.router.navigate([\"/404\"])\n        }else{\n          this.errorService.setError(err);\n        }\n\n        return [err];\n      })\n    );\n  }\n}\n\nexport const appInterceptorProvider: Provider = {\n  multi: true,\n  useClass: AppInterceptor,\n  provide: HTTP_INTERCEPTORS,\n};"],"mappings":"AAAA,SACEA,iBAAiB,QAKZ,sBAAsB;AAG7B,SAAqBC,UAAU,QAAQ,MAAM;;;;AAM7C,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,MAAc,EAAUC,YAA0B;IAAlD,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,YAAY,GAAZA,YAAY;EAAkB;EAE1EC,SAASA,CACPC,GAAqB,EACrBC,IAAiB;IAGjBD,GAAG,GAAGA,GAAG,CAACE,KAAK,CAAC;MACdC,eAAe,EAAE;KAClB,CAAC;IAGF,OAAOF,IAAI,CAACG,MAAM,CAACJ,GAAG,CAAC,CAACK,IAAI,CAC1BX,UAAU,CAAEY,GAAG,IAAI;MACjB,IAAGA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAC;QACpB,IAAI,CAACV,MAAM,CAACW,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;OAC/B,MAAI;QACH,IAAI,CAACV,YAAY,CAACW,QAAQ,CAACH,GAAG,CAAC;;MAGjC,OAAO,CAACA,GAAG,CAAC;IACd,CAAC,CAAC,CACH;EACH;EAAC,QAAAI,CAAA,G;qBAxBUf,cAAc,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdtB,cAAc;IAAAuB,OAAA,EAAdvB,cAAc,CAAAwB;EAAA;;AA2B3B,OAAO,MAAMC,sBAAsB,GAAa;EAC9CC,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAE3B,cAAc;EACxB4B,OAAO,EAAE9B;CACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}