{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserService } from '../../feature/services/user.service';\nexport const canActivate = (route, state) => {\n  const userService = inject(UserService);\n  const router = inject(Router);\n  if (userService.isLoggedIn) {\n    return true;\n  }\n  router.navigate([\"/404\"]);\n  return false;\n};\nexport const canNotActivate = (route, state) => {\n  const userService = inject(UserService);\n  const router = inject(Router);\n  if (!userService.isLoggedIn) {\n    return true;\n  }\n  router.navigate([\"/404\"]);\n  return false;\n};\nexport const canManipulate = (route, state) => {\n  let canManipulate = false;\n  const router = inject(Router);\n  const isOwner = router.getCurrentNavigation()?.extras.state?.[\"isOwner\"];\n  if (isOwner) {\n    canManipulate = true;\n  }\n  return canManipulate;\n};","map":{"version":3,"names":["inject","Router","UserService","canActivate","route","state","userService","router","isLoggedIn","navigate","canNotActivate","canManipulate","isOwner","getCurrentNavigation","extras"],"sources":["/Users/stoyangalchev/Desktop/Webflix-Angular/Webflix/src/app/core/guards/auth.guard.ts"],"sourcesContent":["import { inject } from '@angular/core';\nimport { CanActivateFn, Router } from '@angular/router';\nimport { UserService } from '../../feature/services/user.service';\n\n\nexport const canActivate : CanActivateFn = (route, state) => {\n  const userService = inject(UserService);\n  const router = inject(Router);\n\n  if(userService.isLoggedIn){\n    return true;\n  }\n\n  router.navigate([\"/404\"]);\n  return false;\n};\n\nexport const canNotActivate : CanActivateFn = (route, state) => {\n  const userService = inject(UserService);\n  const router = inject(Router);\n\n  if(!userService.isLoggedIn){\n    return true;\n  }\n  \n  router.navigate([\"/404\"]);\n  return false;\n};\n\nexport const  canManipulate: CanActivateFn = (route, state) => {\n  let canManipulate = false;\n  const router = inject(Router);\n\n  const isOwner = router.getCurrentNavigation()?.extras.state?.[\"isOwner\"];\n\n  if(isOwner){\n    canManipulate = true\n  }\n\n  return canManipulate;\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAAwBC,MAAM,QAAQ,iBAAiB;AACvD,SAASC,WAAW,QAAQ,qCAAqC;AAGjE,OAAO,MAAMC,WAAW,GAAmBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EAC1D,MAAMC,WAAW,GAAGN,MAAM,CAACE,WAAW,CAAC;EACvC,MAAMK,MAAM,GAAGP,MAAM,CAACC,MAAM,CAAC;EAE7B,IAAGK,WAAW,CAACE,UAAU,EAAC;IACxB,OAAO,IAAI;;EAGbD,MAAM,CAACE,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;EACzB,OAAO,KAAK;AACd,CAAC;AAED,OAAO,MAAMC,cAAc,GAAmBA,CAACN,KAAK,EAAEC,KAAK,KAAI;EAC7D,MAAMC,WAAW,GAAGN,MAAM,CAACE,WAAW,CAAC;EACvC,MAAMK,MAAM,GAAGP,MAAM,CAACC,MAAM,CAAC;EAE7B,IAAG,CAACK,WAAW,CAACE,UAAU,EAAC;IACzB,OAAO,IAAI;;EAGbD,MAAM,CAACE,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;EACzB,OAAO,KAAK;AACd,CAAC;AAED,OAAO,MAAOE,aAAa,GAAkBA,CAACP,KAAK,EAAEC,KAAK,KAAI;EAC5D,IAAIM,aAAa,GAAG,KAAK;EACzB,MAAMJ,MAAM,GAAGP,MAAM,CAACC,MAAM,CAAC;EAE7B,MAAMW,OAAO,GAAGL,MAAM,CAACM,oBAAoB,EAAE,EAAEC,MAAM,CAACT,KAAK,GAAG,SAAS,CAAC;EAExE,IAAGO,OAAO,EAAC;IACTD,aAAa,GAAG,IAAI;;EAGtB,OAAOA,aAAa;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}