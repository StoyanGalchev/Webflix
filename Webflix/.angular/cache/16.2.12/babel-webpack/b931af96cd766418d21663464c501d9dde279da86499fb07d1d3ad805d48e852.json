{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from \"src/environments/environment.development\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MovieService {\n  constructor(http) {\n    this.http = http;\n  }\n  getMovie(id) {\n    return this.http.get(`${environment.apiUrl}/movies/${id}`);\n  }\n  getMovies() {\n    return this.http.get(`${environment.apiUrl}/movies`);\n  }\n  createMovie(title, director, year, genre, imageUrl, plot) {\n    return this.http.post(`${environment.apiUrl}/movies`, {\n      title,\n      director,\n      year,\n      genre,\n      imageUrl,\n      plot\n    });\n  }\n  editMovie(title, director, year, genre, imageUrl, plot, movieId) {\n    return this.http.post(`${environment.apiUrl}/movies/${movieId}/edit`, {\n      title,\n      director,\n      year,\n      genre,\n      imageUrl,\n      plot\n    });\n  }\n  deleteMovie(movieId) {\n    return this.http.post(`${environment.apiUrl}/movies/${movieId}/delete`, {});\n  }\n  deleteComment(commentId) {\n    const token = \"YOUR_TOKEN_VALUE\"; // Replace \"YOUR_TOKEN_VALUE\" with the actual token value\n    const headers = new HttpHeaders({\n      Authorization: \"Bearer \" + token\n    });\n    return this.http.post(`${environment.apiUrl}/movies/${commentId._id}/delete`, {}, {\n      headers: headers\n    });\n  }\n  getMovieWithLimit(limit) {\n    const limitFilter = limit ? `?limit=${limit}` : \"\";\n    return this.http.get(`${environment.apiUrl}/movies/latest${limitFilter}`);\n  }\n  static #_ = this.ɵfac = function MovieService_Factory(t) {\n    return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MovieService,\n    factory: MovieService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","MovieService","constructor","http","getMovie","id","get","apiUrl","getMovies","createMovie","title","director","year","genre","imageUrl","plot","post","editMovie","movieId","deleteMovie","deleteComment","commentId","token","headers","Authorization","_id","getMovieWithLimit","limit","limitFilter","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/stoyangalchev/Desktop/Webflix-Angular/Webflix/src/app/feature/services/movie.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { environment } from \"src/environments/environment.development\";\nimport { Movie } from \"../../Types/Movie\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class MovieService {\n  constructor(private http: HttpClient) {}\n\n  getMovie(id: string) {\n    return this.http.get<Movie>(`${environment.apiUrl}/movies/${id}`);\n  }\n\n  getMovies() {\n    return this.http.get<Movie[]>(`${environment.apiUrl}/movies`);\n  }\n\n  createMovie(\n    title: string,\n    director: string,\n    year: number,\n    genre: string,\n    imageUrl: string,\n    plot: string\n  ) {\n    return this.http.post<Movie>(`${environment.apiUrl}/movies`, {\n      title,\n      director,\n      year,\n      genre,\n      imageUrl,\n      plot,\n    });\n  }\n\n  editMovie(\n    title: string,\n    director: string,\n    year: number,\n    genre: string,\n    imageUrl: string,\n    plot: string,\n    movieId: string\n  ) {\n    return this.http.post<Movie>(\n      `${environment.apiUrl}/movies/${movieId}/edit`,\n      { title, director, year, genre, imageUrl, plot }\n    );\n  }\n\n  deleteMovie(movieId: string) {\n    return this.http.post<Movie>(\n      `${environment.apiUrl}/movies/${movieId}/delete`,\n      {}\n    );\n  }\n\n  deleteComment(commentId: any) {\n    const token = \"YOUR_TOKEN_VALUE\"; // Replace \"YOUR_TOKEN_VALUE\" with the actual token value\n    const headers = new HttpHeaders({\n      Authorization: \"Bearer \" + token,\n    });\n    return this.http.post<Movie>(\n      `${environment.apiUrl}/movies/${commentId._id}/delete`,\n      {},\n      { headers: headers }\n    );\n  }\n\n  getMovieWithLimit(limit?: number) {\n    const limitFilter = limit ? `?limit=${limit}` : \"\";\n\n    return this.http.get<Movie[]>(\n      `${environment.apiUrl}/movies/latest${limitFilter}`\n    );\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,WAAW,QAAQ,0CAA0C;;;AAMtE,OAAM,MAAOC,YAAY;EACvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCC,QAAQA,CAACC,EAAU;IACjB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAQ,GAAGN,WAAW,CAACO,MAAM,WAAWF,EAAE,EAAE,CAAC;EACnE;EAEAG,SAASA,CAAA;IACP,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAU,GAAGN,WAAW,CAACO,MAAM,SAAS,CAAC;EAC/D;EAEAE,WAAWA,CACTC,KAAa,EACbC,QAAgB,EAChBC,IAAY,EACZC,KAAa,EACbC,QAAgB,EAChBC,IAAY;IAEZ,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAQ,GAAGhB,WAAW,CAACO,MAAM,SAAS,EAAE;MAC3DG,KAAK;MACLC,QAAQ;MACRC,IAAI;MACJC,KAAK;MACLC,QAAQ;MACRC;KACD,CAAC;EACJ;EAEAE,SAASA,CACPP,KAAa,EACbC,QAAgB,EAChBC,IAAY,EACZC,KAAa,EACbC,QAAgB,EAChBC,IAAY,EACZG,OAAe;IAEf,OAAO,IAAI,CAACf,IAAI,CAACa,IAAI,CACnB,GAAGhB,WAAW,CAACO,MAAM,WAAWW,OAAO,OAAO,EAC9C;MAAER,KAAK;MAAEC,QAAQ;MAAEC,IAAI;MAAEC,KAAK;MAAEC,QAAQ;MAAEC;IAAI,CAAE,CACjD;EACH;EAEAI,WAAWA,CAACD,OAAe;IACzB,OAAO,IAAI,CAACf,IAAI,CAACa,IAAI,CACnB,GAAGhB,WAAW,CAACO,MAAM,WAAWW,OAAO,SAAS,EAChD,EAAE,CACH;EACH;EAEAE,aAAaA,CAACC,SAAc;IAC1B,MAAMC,KAAK,GAAG,kBAAkB,CAAC,CAAC;IAClC,MAAMC,OAAO,GAAG,IAAIxB,WAAW,CAAC;MAC9ByB,aAAa,EAAE,SAAS,GAAGF;KAC5B,CAAC;IACF,OAAO,IAAI,CAACnB,IAAI,CAACa,IAAI,CACnB,GAAGhB,WAAW,CAACO,MAAM,WAAWc,SAAS,CAACI,GAAG,SAAS,EACtD,EAAE,EACF;MAAEF,OAAO,EAAEA;IAAO,CAAE,CACrB;EACH;EAEAG,iBAAiBA,CAACC,KAAc;IAC9B,MAAMC,WAAW,GAAGD,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG,EAAE;IAElD,OAAO,IAAI,CAACxB,IAAI,CAACG,GAAG,CAClB,GAAGN,WAAW,CAACO,MAAM,iBAAiBqB,WAAW,EAAE,CACpD;EACH;EAAC,QAAAC,CAAA,G;qBArEU5B,YAAY,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZjC,YAAY;IAAAkC,OAAA,EAAZlC,YAAY,CAAAmC,IAAA;IAAAC,UAAA,EAFX;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}