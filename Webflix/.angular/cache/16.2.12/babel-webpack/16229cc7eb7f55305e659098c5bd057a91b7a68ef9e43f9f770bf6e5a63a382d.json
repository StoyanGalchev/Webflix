{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ModalService {\n  constructor() {\n    this.display$$ = new BehaviorSubject('close');\n  }\n  watch() {\n    return this.display$$.asObservable();\n  }\n  open() {\n    this.display$$.next('open');\n  }\n  close() {\n    this.display$$.next('close');\n  }\n  static #_ = this.ɵfac = function ModalService_Factory(t) {\n    return new (t || ModalService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ModalService,\n    factory: ModalService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","ModalService","constructor","display$$","watch","asObservable","open","next","close","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/stoyangalchev/Desktop/Webflix-Angular/Webflix/src/app/feature/services/modal.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\n\nimport {BehaviorSubject, Observable} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalService {\n  private display$$: BehaviorSubject<string> = new BehaviorSubject('close');\n\n  watch(): Observable<string> {\n    return this.display$$.asObservable();\n  }\n\n  open() {\n    this.display$$.next('open');\n  }\n\n  close() {\n    this.display$$.next('close');\n  }\n}"],"mappings":"AAEA,SAAQA,eAAe,QAAmB,MAAM;;AAKhD,OAAM,MAAOC,YAAY;EAHzBC,YAAA;IAIU,KAAAC,SAAS,GAA4B,IAAIH,eAAe,CAAC,OAAO,CAAC;;EAEzEI,KAAKA,CAAA;IACH,OAAO,IAAI,CAACD,SAAS,CAACE,YAAY,EAAE;EACtC;EAEAC,IAAIA,CAAA;IACF,IAAI,CAACH,SAAS,CAACI,IAAI,CAAC,MAAM,CAAC;EAC7B;EAEAC,KAAKA,CAAA;IACH,IAAI,CAACL,SAAS,CAACI,IAAI,CAAC,OAAO,CAAC;EAC9B;EAAC,QAAAE,CAAA,G;qBAbUR,YAAY;EAAA;EAAA,QAAAS,EAAA,G;WAAZT,YAAY;IAAAU,OAAA,EAAZV,YAAY,CAAAW,IAAA;IAAAC,UAAA,EAFX;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}