{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from \"src/environments/environment.development\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MovieService = /*#__PURE__*/(() => {\n  class MovieService {\n    constructor(http) {\n      this.http = http;\n    }\n    getMovie(id) {\n      return this.http.get(`${environment.apiUrl}/movies/${id}`);\n    }\n    getMovies() {\n      return this.http.get(`${environment.apiUrl}/movies`);\n    }\n    createMovie(title, director, year, genre, imageUrl, plot) {\n      return this.http.post(`${environment.apiUrl}/movies`, {\n        title,\n        director,\n        year,\n        genre,\n        imageUrl,\n        plot\n      });\n    }\n    editMovie(title, director, year, genre, imageUrl, plot, movieId) {\n      return this.http.post(`${environment.apiUrl}/movies/${movieId}/edit`, {\n        title,\n        director,\n        year,\n        genre,\n        imageUrl,\n        plot\n      });\n    }\n    deleteMovie(movieId) {\n      return this.http.post(`${environment.apiUrl}/movies/${movieId}/delete`, {});\n    }\n    deleteComment(commentId) {\n      const token = \"YOUR_TOKEN_VALUE\"; // Replace \"YOUR_TOKEN_VALUE\" with the actual token value\n      const headers = new HttpHeaders({\n        Authorization: \"Bearer \" + token\n      });\n      return this.http.post(`${environment.apiUrl}/movies/${commentId._id}/delete`, {}, {\n        headers: headers\n      });\n    }\n    getMovieWithLimit(limit) {\n      const limitFilter = limit ? `?limit=${limit}` : \"\";\n      return this.http.get(`${environment.apiUrl}/movies/latest${limitFilter}`);\n    }\n    static #_ = this.ɵfac = function MovieService_Factory(t) {\n      return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: MovieService,\n      factory: MovieService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return MovieService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}