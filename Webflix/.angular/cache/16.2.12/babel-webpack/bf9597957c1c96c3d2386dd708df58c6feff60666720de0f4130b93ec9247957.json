{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { DEFAULT_USER_IMG_URL } from '../constats/defaultImageUrl';\nimport { environment } from \"../../../environments/environment.development\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  get isLoggedIn() {\n    return !!this.user;\n  }\n  constructor(http) {\n    this.http = http;\n    this.user$$ = new BehaviorSubject(undefined);\n    this.user$ = this.user$$.asObservable();\n    this.subscription = this.user$.subscribe(user => {\n      this.user = user;\n    });\n  }\n  login(username, password) {\n    return this.http.post(`${environment.apiUrl}/login`, {\n      username,\n      password\n    }).pipe(tap(user => this.user$$.next(user)));\n  }\n  register(username, email, password, rePassword, age) {\n    return this.http.post(`${environment.apiUrl}/register`, {\n      username,\n      email,\n      password,\n      rePassword,\n      age,\n      imageUrl: DEFAULT_USER_IMG_URL\n    });\n  }\n  logout() {\n    return this.http.post(`${environment.apiUrl}/logout`, {}).pipe(tap(() => this.user$$.next(undefined)));\n  }\n  getProfile() {\n    return this.http.get(`${environment.apiUrl}/users/profile`).pipe(tap(user => this.user$$.next(user)));\n  }\n  updateProfile(imageUrl) {\n    return this.http.put(`${environment.apiUrl}/users/profile`, {\n      imageUrl\n    }).pipe(tap(user => this.user$$.next(user)));\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","tap","DEFAULT_USER_IMG_URL","environment","UserService","isLoggedIn","user","constructor","http","user$$","undefined","user$","asObservable","subscription","subscribe","login","username","password","post","apiUrl","pipe","next","register","email","rePassword","age","imageUrl","logout","getProfile","get","updateProfile","put","ngOnDestroy","unsubscribe","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/stoyangalchev/Desktop/Webflix-Angular/Webflix/src/app/feature/services/user.service.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { User } from '../../Types/User';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Subscription, tap } from 'rxjs';\nimport { DEFAULT_USER_IMG_URL } from '../constats/defaultImageUrl';\nimport { environment } from \"../../../environments/environment.development\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService implements OnDestroy {\n  private user$$ = new BehaviorSubject<User | undefined>(undefined);\n  public user$ = this.user$$.asObservable();\n\n  user: User | undefined;\n\n\n  get isLoggedIn(): boolean {\n    return !!this.user;\n  }\n\n  subscription: Subscription;\n\n  constructor(private http: HttpClient) {\n    this.subscription = this.user$.subscribe((user) => {\n      this.user = user;\n    });\n  }\n\n  login(username: string, password: string) {\n    return this.http\n      .post<User>(`${environment.apiUrl}/login`, { username, password })\n      .pipe(tap((user) => this.user$$.next(user)));\n  }\n\n  register(\n    username: string,\n    email: string,\n    password: string,\n    rePassword: string,\n    age: number,\n  ) {\n    return this.http\n      .post<User>(`${environment.apiUrl}/register`, {\n        username,\n        email,\n        password,\n        rePassword,\n        age,\n        imageUrl: DEFAULT_USER_IMG_URL\n      })\n  }\n\n  logout() {\n    return this.http\n      .post<User>(`${environment.apiUrl}/logout`, {})\n      .pipe(tap(() => this.user$$.next(undefined)));\n  }\n\n  getProfile() {\n    return this.http\n      .get<User>(`${environment.apiUrl}/users/profile`)\n      .pipe(tap((user) => this.user$$.next(user)));\n  }\n\n  updateProfile(imageUrl: string) {\n    return this.http\n      .put<User>(`${environment.apiUrl}/users/profile`, { imageUrl })\n      .pipe(tap((user) => this.user$$.next(user)));\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n\n"],"mappings":"AAGA,SAASA,eAAe,EAAgBC,GAAG,QAAQ,MAAM;AACzD,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE,SAASC,WAAW,QAAQ,+CAA+C;;;AAK3E,OAAM,MAAOC,WAAW;EAOtB,IAAIC,UAAUA,CAAA;IACZ,OAAO,CAAC,CAAC,IAAI,CAACC,IAAI;EACpB;EAIAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAZhB,KAAAC,MAAM,GAAG,IAAIT,eAAe,CAAmBU,SAAS,CAAC;IAC1D,KAAAC,KAAK,GAAG,IAAI,CAACF,MAAM,CAACG,YAAY,EAAE;IAYvC,IAAI,CAACC,YAAY,GAAG,IAAI,CAACF,KAAK,CAACG,SAAS,CAAER,IAAI,IAAI;MAChD,IAAI,CAACA,IAAI,GAAGA,IAAI;IAClB,CAAC,CAAC;EACJ;EAEAS,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACT,IAAI,CACbU,IAAI,CAAO,GAAGf,WAAW,CAACgB,MAAM,QAAQ,EAAE;MAAEH,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CACjEG,IAAI,CAACnB,GAAG,CAAEK,IAAI,IAAK,IAAI,CAACG,MAAM,CAACY,IAAI,CAACf,IAAI,CAAC,CAAC,CAAC;EAChD;EAEAgB,QAAQA,CACNN,QAAgB,EAChBO,KAAa,EACbN,QAAgB,EAChBO,UAAkB,EAClBC,GAAW;IAEX,OAAO,IAAI,CAACjB,IAAI,CACbU,IAAI,CAAO,GAAGf,WAAW,CAACgB,MAAM,WAAW,EAAE;MAC5CH,QAAQ;MACRO,KAAK;MACLN,QAAQ;MACRO,UAAU;MACVC,GAAG;MACHC,QAAQ,EAAExB;KACX,CAAC;EACN;EAEAyB,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACnB,IAAI,CACbU,IAAI,CAAO,GAAGf,WAAW,CAACgB,MAAM,SAAS,EAAE,EAAE,CAAC,CAC9CC,IAAI,CAACnB,GAAG,CAAC,MAAM,IAAI,CAACQ,MAAM,CAACY,IAAI,CAACX,SAAS,CAAC,CAAC,CAAC;EACjD;EAEAkB,UAAUA,CAAA;IACR,OAAO,IAAI,CAACpB,IAAI,CACbqB,GAAG,CAAO,GAAG1B,WAAW,CAACgB,MAAM,gBAAgB,CAAC,CAChDC,IAAI,CAACnB,GAAG,CAAEK,IAAI,IAAK,IAAI,CAACG,MAAM,CAACY,IAAI,CAACf,IAAI,CAAC,CAAC,CAAC;EAChD;EAEAwB,aAAaA,CAACJ,QAAgB;IAC5B,OAAO,IAAI,CAAClB,IAAI,CACbuB,GAAG,CAAO,GAAG5B,WAAW,CAACgB,MAAM,gBAAgB,EAAE;MAAEO;IAAQ,CAAE,CAAC,CAC9DN,IAAI,CAACnB,GAAG,CAAEK,IAAI,IAAK,IAAI,CAACG,MAAM,CAACY,IAAI,CAACf,IAAI,CAAC,CAAC,CAAC;EAChD;EAEA0B,WAAWA,CAAA;IACT,IAAI,CAACnB,YAAY,CAACoB,WAAW,EAAE;EACjC;EAAC,QAAAC,CAAA,G;qBA/DU9B,WAAW,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXnC,WAAW;IAAAoC,OAAA,EAAXpC,WAAW,CAAAqC,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}